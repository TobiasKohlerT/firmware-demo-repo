# Default values for mc-lifecycle-manager.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

namespace: "test"

sensors:
  - sensor: "ADXL345"
    type: "accelerometer"
    unit: "m/s^2"
    fields:
      - name: "x"
        type: int16
      - name: "y"
        type: int16
      - name: "z"
        type: int16
  - sensor: "BMP180"
    type: "barometer"
    unit: "Pa"
    fields:
      - name: "pressure"
        type: int16


deviceGroups:
  - deviceGroupName: "device-group"
    label: "label"
    firmwareRepository:
      owner: "TobiasKohlerT"
      repoName: "datapipeline-operator"
      accessToken: "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"
      workflowName: "DeviceGroupCI"
      workflowFileName: "devicegroup-ci.yaml"
    devices:
      serialNumbers:
        - "066AFF34314B4E3043073352"
        - "066FFF545351857087113811"
      microcontrollerSpec:
        deviceName: "stm32-nucleo"
        vendorId: "0483"
        productId: "374b"
        baudRate: 9600
        sensors:
          - sensor: "ADXL345"
            id: 1
          - sensor: "BMP180"
            id: 2

telegraf:
  influxdb:
    url: "http://influxdb-influxdb2.default.svc.cluster.local:80"
    organization: "influxdata" 
    bucket: "default"
    token: "mWggXbm3cvaOvg3TVz7S6tbPXoO0LU1AVqnYOHSCz8_vjkk6isJ8Bsrx5ss5a9ZtImXbikG6magaLA_rDXpifw=="


cloudMqttBroker:
  name: "mosquitto"
  port: 1884
  service:
    port: 1884

cloudRunner:
  name: "cloud-runner"
  replicaCount: 1


operator:
  namePrefix: "datapipeline-operator-"
  namespace: "datapipeline-operator-system"