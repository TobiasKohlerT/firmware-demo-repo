name: DeviceGroupCI
env:
  WORKSPACE: "./firmware/project-a"
  DEVICEGROUP: "device-group"

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'firmware/project-a/**'
  workflow_dispatch:
    inputs:
      serialNumber:
        description: 'Serial number of the device'
        required: true
      port:
        description: 'Port of the device'
        required: true

run-name: "${{ github.event.inputs.serialNumber }}"


jobs:
  # continuous_integration:
  #   runs-on: ['device-group']
  #   if: github.event_name != 'workflow_dispatch'
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Install PlatformIO Core
  #       run: pip install --upgrade platformio
      
  #     - name: build firmware
  #       id: build
  #       run: |
  #         cd ${{ env.WORKSPACE }}
  #         ls
  #         pio run #-d ${{ env.WORKSPACE }}

  #     # - name: test firmware
  #     #   id: test
  #     #   run: |
  #     #     pio test -d ${{ env.WORKSPACE }}

  #     - name: Get version
  #       id: version
  #       run: |
  #         cd ${{ env.WORKSPACE }}
  #         version=$(grep 'version:' version.yaml | cut -d ' ' -f 2)
  #         echo "version=$version" >> $GITHUB_ENV
  #         #echo "::set-output name=version::$(grep 'version:' version.yaml | cut -d ' ' -f 2)"

      # - name: Create tag
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: 'refs/tags/${{ env.DEVICEGROUP }}-${{ env.version }}',
      #         sha: context.sha
      #       })

      # - name: Tag commit
      #   if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && success() }}
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     VERSION=${{ env.version }}
      #     DEVICEGROUP=${{ env.DEVICEGROUP }}
      #     TAG_NAME="${DEVICEGROUP}-${VERSION}"
      #     git tag -a "$TAG_NAME" -m "Tag generated by GitHub Actions"
      #     git push origin "$TAG_NAME"


# > got to > settings > actions > workflow permissions > enable all actions
      # - name: Find workflow run by tag
      #   id: find_run
      #   run: |
      #     # run_id=$(gh api \
      #     gh api \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "X-GitHub-Api-Version: 2022-11-28" \
      #       /repos/${{ github.repository }}/actions/runs

      #     #   -H "Accept: application/vnd.github+json" \
      #     #   /repos/${{ github.repository }}/actions/runs \
      #     #   -F event=push \
      #     #   -F branch="${DEVICEGROUP}-${VERSION}" \
      #     #   --jq '.workflow_runs[0].id')
      #     # echo "RUN_ID=$run_id" >> $GITHUB_ENV
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Create artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: build-${{ env.version }} #${{ steps.version.outputs.version }}
  #         path: |
  #           ${{ env.WORKSPACE }}/.pio/build/*
  #           ${{ env.WORKSPACE }}/platformio.ini
  #       # env:
  #       #   version: ${{ steps.version.outputs.version }}





  prepare_rollout:
    #needs: continuous_integration
    runs-on: ['device-group']
    if: ${{ github.event_name == 'push'}}
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: create matrix
        id: matrix
        run: |
          if [ "${GITHUB_EVENT_NAME}" == "push" ]; then
            echo "Event is push"
            echo ${{ env.version }}
            cd ${{ env.WORKSPACE }}
            echo "Prepare rollout"
            PATH="/etc/runner/config/${{ env.DEVICEGROUP }}/config.json"
            matrix=$(/usr/bin/jq -c '.' $PATH)
            echo $matrix
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          else
            echo "Unsupported event: ${GITHUB_EVENT_NAME}"
            exit 1
          fi


  # prepare_init:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name == 'workflow_dispatch'}}
  #   outputs:
  #     matrix: ${{ steps.matrix.outputs.matrix }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: create matrix dispatch
  #       id: matrix-dispatch
  #       run: |
  #         if [ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]; then
  #           sudo apt-get update
  #           sudo apt-get install -y jq
  #           echo "Event is workflow_dispatch"
  #           echo ${{ github.event.inputs.serialNumber }}
  #           echo "Prepare rollout"
  #           port=${{ github.event.inputs.port }}
  #           runner=${{ github.event.inputs.serialNumber }}
  #           matrix=$(echo "{\"include\":[{\"serial\":\"$runner\",\"port\":\"$port\"}]}" | jq -c .)
  #           # matrix=$(echo "[\"${{ github.event.inputs.serialNumber }}\"]" | jq -c .)
  #           echo $matrix
  #           echo "matrix=$matrix" >> $GITHUB_OUTPUT
  #         else
  #           echo "Unsupported event: ${GITHUB_EVENT_NAME}"
  #           exit 1
  #         fi

      #     echo ${{ env.version}}
      #     cd ${{ env.WORKSPACE }}
      #     echo "Prepare rollout"
      #     jq -r '.serials' microcontrollers.json
      #     matrix=$(jq -c '.serials' microcontrollers.json)
      #     echo $matrix
      #     echo "matrix=$matrix" >> $GITHUB_OUTPUT
      #     # echo "matrix=$(jq -c '.serials' microcontrollers.json)" >> $GITHUB_OUTPUT
      #     echo $GITHUB_OUTPUT

      #     # jq -r 'to_entries | map(select(.value != "false")) | map(.key)' microcontrollers.json
      #     # echo "matrix=$(jq -c 'to_entries | map(select(.value != "false")) | map(.key)' microcontrollers.json)" >> $GITHUB_OUTPUT
      #     # echo $GITHUB_OUTPUT

      # - name: create matrix dispatch
      #   if: ${{ github.event_name == 'workflow_dispatch'}}
      #   id: matrixdispatch
      #   run: |
      #     echo ${{ inputs.serialNumber }}
      #     echo "Prepare rollout"
      #     matrix=$(echo "[\"${{ github.event.inputs.serialNumber }}\"]" | jq -c .)
      #     echo $matrix
      #     echo "matrix=$matrix" >> $GITHUB_OUTPUT
      #     echo $GITHUB_OUTPUT

  deploy:
    name: ${{ matrix.runner }}
    needs: prepare_rollout
    strategy:
      matrix: ${{ fromJson(needs.prepare_rollout.outputs.matrix) }}
        #serial: ${{ fromJson(needs.prepare_rollout.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          cd ${{ env.WORKSPACE }}
          version=$(grep 'version:' version.yaml | cut -d ' ' -f 2)
          echo "version=$version" >> $GITHUB_ENV

          echo ${{ matrix.runner }}
          echo ${{ matrix.port }}

      # - name: Download artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-${{ env.version }}
      #     path: ${{ env.WORKSPACE }}

      # - name: Install dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y python3.8-venv

      # - name: Install PlatformIO
      #   run: |
      #     if ! command -v pio &> /dev/null; then
      #       curl -fsSL -o get-platformio.py https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py
      #       python3 get-platformio.py
      #     else
      #       echo "PlatformIO is already installed"
      #     fi
      
      # - uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cache/pip
      #       ~/.platformio/.cache
      #     key: ${{ runner.os }}-pio

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      
      - name: Deploy firmware
        run: |
          echo "Deploy firmware" # using platformio and downloaded artifact
          sudo chmod a+rw ${{ matrix.port }}
          cd ${{ env.WORKSPACE }}
          pio run -t upload --upload-port ${{ matrix.port }}
      

  initialize:
    name: ${{ matrix.serial }}
    if: ${{ github.event_name == 'workflow_dispatch'}}
    strategy:
      matrix:
        include:
          - serial: ${{ github.event.inputs.serialNumber }}
            port: ${{ github.event.inputs.port }}
    runs-on: ${{ matrix.serial }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          cd ${{ env.WORKSPACE }}
          version=$(grep 'version:' version.yaml | cut -d ' ' -f 2)
          echo "version=$version" >> $GITHUB_ENV

          echo ${{ matrix.serial }}
          echo ${{ matrix.port }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      
      - name: Deploy firmware
        run: |
          echo "Deploy firmware" # using platformio and downloaded artifact
          sudo chmod a+rw ${{ matrix.port }}
          cd ${{ env.WORKSPACE }}
          pio run -t upload --upload-port ${{ matrix.port }}
